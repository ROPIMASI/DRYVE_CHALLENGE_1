
## RECRUITMENT REQUIREMENTS
* Spring Boot with Java or Kotlin
* Maven or Gradle
* Relational database
* REST APIs for registration and searching;

## PLUS RECRUITMENTS SKILLS
* Unitary tests
* Integration tests
* Database versioning (flyway or liquibase)
* Dockerfile for project's container
* Docker compose for project dependencies
* Publication of registration events using RabbitMQ


## BUSNESS REQUIREMENT
### User gives information to registry
* plate
  > UNIQUE verify if not exists on APP.DB.vehicle.plate table.
* AdvertisingPrice
  + brandId (ex: ‘ca43ec74-5bb0-4288-ab11-5df094ca4dc4’)
    > FK verify if exists on APP.DB.brand.id table.
  + modelyearID
    > FK on APP.DB.modelyear table, according APP's verification below.
    - ModelId (ex: ‘5bc16064-d3ee-4aed-a264-a914233d0c4f’)
      > APP verify if exists this model and below year together on APP.DB.modelyear.modelid table.
    - VehicleYear
      > APP verify if exists this year and above model together on APP.DB.modelyear.year table.



API performs external search:
Get the vehicle's price on KBB table https://6048bdf1fb5dcc0017968e3f.mockapi.io/api/v1/kbb{.../...}
Ex: https://6048bdf1fb5dcc0017968e3f.mockapi.io/api/v1/kbb/prices/1



APP saves every vehicle data on relational DB:
  Plate			/* given from user */
  AdvertisingPrice	/* given from user */
  modelyearId		/* APP attributes this FK according business rules pointed above */
	VehicleYear		/* gotten from APP.DB.modelyear.year table if the given year from user exists on AP.DB.modelyear table */
	/* models and brand also is registered */
  KBBPrice		/* gotten from external api */
  RegistryDate		/* gotten form system */



Brands, Models, and Vehicles (at least) must have a FK chain between them.
Ex: I'll do Brands, Models, modelyear-Relation and Vehicles.



Plate is UNIQUE in Vehicles.



It is mandatory all vehicle registering must be related to an existing brand, model, and year pre-registered on API-DB and KBB-API.



The result of a vehicle searching on this APP must follow the template:
{
  "Plate": "XYZ-1234",
  "AdvertisingPrice": 1234.56,
  "VehicleYear": 2020,
  "KBBPrice": 120000.00,
  "RegistryDate": "2020-05-18",
  "Brand": "FIAT",
  "Model": "UNO"
}
